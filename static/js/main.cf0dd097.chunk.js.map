{"version":3,"sources":["Stopwatch.js","Game.js","App.js","index.js"],"names":["Stopwatch","_ref","toggle","score","problems","setProblems","data","setData","_useState","useState","_useState2","_slicedToArray","time","setTime","text","startTime","useRef","Date","problemTracker","updateData","problem","concat","x","id","useEffect","timer","setInterval","elapsed","document","getElementById","style","visibility","textAlign","fontSize","console","log","map","split","updateTime","parse","current","t","time1","time2","getTime","toFixed","color","k","opacity","lastProblem","pop","problemTime","clearInterval","React","createElement","Game","setScore","_useState3","_useState4","_useState5","_useState6","lower","upper","operator","_useState7","_useState8","value","setValue","_useState9","_useState10","question","setQuestion","toProblem","i","temp","getRandomAdd","rand1","Math","floor","random","rand2","getRandomMinus","max","min","getRandomMult","ceil","sqrt","getRandomDiv","val1","getRandomQuestion","questionType","length","window","addEventListener","onChange","event","input","target","isNaN","correctAdd","correctMinus","correctMult","correctDiv","checkAnswer","parseInt","key","reverse","ScatterChart","width","height","margin","top","right","left","bottom","XAxis","type","dataKey","Label","position","YAxis","angle","offset","Scatter","fill","lineJointType","line","App","displayProblems","setDisplayProblems","setToggle","onload","localStorage","getItem","display","onClick","location","reload","setItem","ReactDOM","createRoot","render"],"mappings":"iOAsHeA,EAnHG,SAAHC,GAAgE,IAA1DC,EAAMD,EAANC,OAAQC,EAAKF,EAALE,MAAOC,EAAQH,EAARG,SAAUC,EAAWJ,EAAXI,YAAaC,EAAIL,EAAJK,KAAMC,EAAON,EAAPM,QAI1CC,EAEKC,mBAASP,EAAS,IAAM,EAFhC,IAE8C,GAAEQ,EAAAC,YAAAH,EAAA,GAAzDI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACdI,EAAOZ,EAAS,IAAM,EAAI,eAAiB,oBAC7Ca,EAAYC,iBAAO,IAAIC,MAEvBC,EAAiBF,iBAAO,CAACb,EAAO,IAAIc,OAgFlCE,EAAa,SAACC,GAChBb,EAAQD,EAAKe,OAAO,CAAC,CAACC,EAAGF,EAAQG,GAAK,EAAGX,KAAMQ,EAAQR,UAkB3D,OAfAY,oBAAW,WAEP,IAAMC,EAAQC,YAAY,YA9EX,SAACC,GAEbzB,EAAS,IAAM,EAEXyB,EAAU,KAlBL,IAoBJd,EApBI,IAoBcc,EAAU,MAG5BC,SAASC,eAAe,QAAQC,MAAMC,WAAa,SACnDH,SAASC,eAAe,SAASC,MAAME,UAAY,SACnDJ,SAASC,eAAe,SAASC,MAAMG,SAAW,OAElDC,QAAQC,IAAI,eAAiB/B,EAASgC,IAAI,SAAAhB,GAAO,OAAIA,EAAQA,QAAQiB,MAAM,UAAU,MACrFH,QAAQC,IAAI,gBAAkB/B,EAASgC,IAAI,SAAAhB,GAAO,OAAIA,EAAQA,QAAQiB,MAAM,UAAU,MACtFH,QAAQC,IAAI,YAAc/B,EAASgC,IAAI,SAAAhB,GAAO,OAAIA,EAAQA,QAAQiB,MAAM,UAAU,MAClFH,QAAQC,IAAI,UAAY/B,EAASgC,IAAI,SAAAhB,GAAO,OAAIA,EAAQA,QAAQiB,MAAM,UAAU,MAChFH,QAAQC,IAAI,QAAU/B,EAASgC,IAAI,SAAAhB,GAAO,OAAIA,EAAQR,SAKvDT,EArCM,GAsCLU,EAAQc,EAAU,MAGlBC,SAASC,eAAe,QAAQC,MAAMC,WAAa,SACnDH,SAASC,eAAe,SAASC,MAAME,UAAY,SACnDJ,SAASC,eAAe,SAASC,MAAMG,SAAW,QAqDtDK,CADcrB,KAAKsB,MAAM,IAAItB,MAAUA,KAAKsB,MAAMxB,EAAUyB,UA5BhD,WAEhB,GAAIrC,IAAUe,EAAesB,QAAQ,GAAG,CACpC,IAAMC,GA5DGC,EA4DS,IAAIzB,KA5DN0B,EA4DczB,EAAesB,QAAQ,KA3DhDE,EAAME,UAAYD,EAAMC,WAAW,KAAMC,QAAQ,IA4DtD3B,EAAesB,QAAU,CAACrC,EAAO,IAAIc,MAGrCW,SAASC,eAAe1B,EAAQ,GAAG2B,MAAMgB,MAD1B,CAAC,QAAS,OAAQ,QAtBvBC,EAuBuDN,EAjBlEM,EAHc,IAIN,EACDA,EAPM,IAQL,EAEA,IAaPnB,SAASC,eAAe1B,EAAQ,GAAG2B,MAAMkB,QAAU,GAEnD,IAAMC,EAAc7C,EAAS8C,MAC7BD,EAAkB,KAAIR,EACtBpC,EAAYD,EAASiB,OAAO4B,IAC5B9B,EAAW8B,GACXf,QAAQC,IAAIc,GA9BH,IAACF,EAzCDL,EAAOC,EAuFhBQ,IAED,KAEH,OAAO,kBAAMC,cAAc3B,KAE5B,CAACtB,EAAOD,IAIPmD,IAAAC,cAAA,KAAG/B,GAAK,SAAQ,IAAET,EAAK,IAAEF,EAAK,MC2DvB2C,MAxKf,SAAatD,GAAc,IAAVC,EAAMD,EAANC,OAEbM,EAC0BC,mBAAS,GAAEC,EAAAC,YAAAH,EAAA,GAA9BL,EAAKO,EAAA,GAAE8C,EAAQ9C,EAAA,GAEtB+C,EACgChD,mBAAS,IAAGiD,EAAA/C,YAAA8C,EAAA,GAArCrD,EAAQsD,EAAA,GAAErD,EAAWqD,EAAA,GAE5BC,EACwBlD,mBAAS,CAAC,CAACa,EAAG,EAAGV,KAAM,KAAIgD,EAAAjD,YAAAgD,EAAA,GAA5CrD,EAAIsD,EAAA,GAAErD,EAAOqD,EAAA,GAGdC,EAAQ,GACRC,EAAQ,IACRC,EAAW,CAAC,IAAI,IAAI,IAAI,KAE9BC,EAC0BvD,mBAAS,IAAGwD,EAAAtD,YAAAqD,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAEtBG,EACgC3D,mBAAS,CAAC,EAAG,EAAG,IAAG4D,EAAA1D,YAAAyD,EAAA,GAA5CE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAG5B,SAASG,EAAUC,GAEf,GAAU,IAANA,EAAQ,CACR,IAAMC,EAAO,CAACJ,EAAS,GAAKA,EAAS,GAAIA,EAAS,GAAKA,EAAS,GAAIA,EAAS,GAAKA,EAAS,GAAIA,EAAS,GAAGA,EAAS,IAAIA,EAAS,IAEjI,OAAOA,EAAS,GAAK,IAAMP,EAASO,EAAS,IAAM,IAAMA,EAAS,GAAK,MAAQI,EAGnF,OAAOJ,EAAS,GAAK,IAAMP,EAASO,EAAS,IAAM,IAAMA,EAAS,GA4CtE,SAASK,IACL,IAAMC,EAAQC,KAAKC,MAAMD,KAAKE,UAAYjB,EAAQD,IAAUA,EACtDmB,EAAQH,KAAKC,MAAMD,KAAKE,UAAYjB,EAAQD,IAAUA,EAE5D3B,QAAQC,IAAI,cACZD,QAAQC,IAAIyC,EAAOI,GACnBT,EAAY,CAACK,EAAOI,EAAO,IAI/B,SAASC,IACL,IAAML,EAAQC,KAAKC,MAAMD,KAAKE,UAAY,EAAIjB,EAAQD,IAAUA,EAC1DmB,EAAQH,KAAKC,MAAMD,KAAKE,UAAY,EAAIjB,EAAQD,IAAUA,EAEhE3B,QAAQC,IAAI,gBAEZoC,EAAY,CAACM,KAAKK,IAAIN,EAAOI,GAAQH,KAAKM,IAAIP,EAAOI,GAAQ,IAGjE,SAASI,IACL,IAAMR,EAAQC,KAAKQ,KAAKR,KAAKE,SAAYF,KAAKS,KAAK,EAAIxB,IAAW,EAC5DkB,EAAQH,KAAKQ,KAAKR,KAAKE,SAAWF,KAAKS,KAAK,EAAIxB,IAAU,EAChE5B,QAAQC,IAAI,eAEZoC,EAAY,CAACK,EAAOI,EAAO,IAI/B,SAASO,IACL,IAAMX,EAAQC,KAAKQ,KAAKR,KAAKE,SAAWF,KAAKS,KAAK,EAAIxB,IAAU,EAC1DkB,EAAQH,KAAKQ,KAAKR,KAAKE,SAAWF,KAAKS,KAAK,EAAIxB,IAAU,EAC1D0B,EAAOZ,EAAQI,EACrB9C,QAAQC,IAAI,cAEZoC,EAAY,CAACiB,EAAMR,EAAO,IAK9B,SAASS,IACL,IAAMC,EAAe,CAACf,EAAcA,EAAcM,EAAgBA,EAAgBG,EAAeG,GAGjGG,EAFiBb,KAAKC,MAAMD,KAAKE,SAAYW,EAAaC,WAS9D,OAJAC,OAAOC,iBAAiB,OAAQ,WAC5BJ,MAIApC,IAAAC,cAAA,WAEID,IAAAC,cAAA,KAAG/B,GAAK,SAAQ,WAASpB,GACzBkD,IAAAC,cAACtD,EAAS,CAACE,OAAUA,EAAQC,MAASA,EAAOC,SAAYA,EAAUC,YAAeA,EAAaC,KAAQA,EAAMC,QAAWA,IAExH8C,IAAAC,cAAA,OAAK/B,GAAK,QACL+C,EAAS,GAAG,IAAEP,EAASO,EAAS,IAAI,IAAEA,EAAS,GAAG,MAAGjB,IAAAC,cAAA,SAAOY,MAASA,EAAO4B,SAhGzF,SAA2BC,GACvB,IAAMC,EAAQD,EAAME,OAAO/B,MAEvBgC,MAAMF,GAGW,KAAVA,GACP7B,EAAS6B,IAHT7B,EAAS6B,GASjB,SAAqBA,GAEjB,IAAMG,EAA8B,IAAhB7B,EAAS,IAAY0B,IAAU1B,EAAS,GAAKA,EAAS,GACpE8B,EAAgC,IAAhB9B,EAAS,IAAY0B,IAAU1B,EAAS,GAAKA,EAAS,GACtE+B,EAA+B,IAAhB/B,EAAS,IAAY0B,IAAU1B,EAAS,GAAKA,EAAS,GACrEgC,EAA8B,IAAhBhC,EAAS,IAAY0B,IAAU1B,EAAS,GAAKA,EAAS,GAE1E,GAAG6B,GAAcC,GAAgBC,GAAeC,EAAW,CAEvD,IAAMlF,EAAU,CACZA,QAASoD,EAAU,GACnB5D,KAAM,EACNW,GAAInB,EAASuF,QAGjBtF,EAAYD,EAASiB,OAAOD,IAI5BqE,IACAtB,EAAS,IACTX,EAASrD,EAAQ,IA7BjBoG,CAAYC,SAASR,EAAO,UA8F5B3C,IAAAC,cAAA,MAAI/B,GAAK,gBACJnB,EAASgC,IAAI,SAAAhB,GAAO,OACjBiC,IAAAC,cAAA,MAAImD,IAAOrF,EAAQG,GAAIA,GAAMH,EAAQG,IAChCH,EAAQA,QAAQ,IAAEA,EAAQR,QAEjC8F,WAINrD,IAAAC,cAAA,OAAK/B,GAAK,SAEN8B,IAAAC,cAACqD,IAAY,CAACC,MAAO,IAAKC,OAAQ,IAAKC,OAAU,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,KAEpF7D,IAAAC,cAAC6D,IAAK,CAACC,KAAK,SAASC,QAAQ,KAC7BhE,IAAAC,cAACgE,IAAK,CAACpD,MAAQ,WAAWqD,SAAW,YAGrClE,IAAAC,cAACkE,IAAK,CAACJ,KAAK,SAASC,QAAQ,QAC7BhE,IAAAC,cAACgE,IAAK,CAACpD,MAAQ,OAAOqD,SAAW,cAAcE,OAAU,GAAIC,OAAU,MAGvErE,IAAAC,cAACqE,IAAO,CAACrH,KAAQA,EAAMsH,KAAK,QAAQC,cAAc,YAAYC,MAAI,QC/DvEC,MA9Ff,WAEE,IAAAvH,EAC8CC,mBAAS,iBAAgBC,EAAAC,YAAAH,EAAA,GAAhEwH,EAAetH,EAAA,GAAEuH,EAAkBvH,EAAA,GAE1C+C,EAC4BhD,mBAAS,GAAEiD,EAAA/C,YAAA8C,EAAA,GAAhCvD,EAAMwD,EAAA,GAAEwE,EAASxE,EAAA,GAqExB,OAjCAkC,OAAOuC,OAAS,WA/BX,WAAYC,cACbF,EAAU1B,SAAS4B,aAAaC,QAAQ,WAAa,GAOpD,oBAAqBD,aAIb,WAFCA,aAAaC,QAAQ,oBAG7BzG,SAASC,eAAe,gBAAgBC,MAAMwG,QAAU,OACxD1G,SAASC,eAAe,SAASC,MAAMwG,QAAU,OACjDL,EAAmB,mBAEnBrG,SAASC,eAAe,gBAAgBC,MAAMwG,QAAU,QACxD1G,SAASC,eAAe,SAASC,MAAMwG,QAAU,OACjDL,EAAmB,mBAIrBrG,SAASC,eAAe,gBAAgBC,MAAMwG,QAAU,OACxD1G,SAASC,eAAe,SAASC,MAAMwG,QAAU,SAyCnDjF,IAAAC,cAAA,WAEED,IAAAC,cAAA,OAAK/B,GAAK,WAER8B,IAAAC,cAAA,UAAQiF,QAAW,kBAAM3C,OAAO4C,SAASC,WAAU,aACnDpF,IAAAC,cAAA,UAAQiF,QA/Bd,WACIH,aAAaM,QAAQ,SAAUxI,GAC/B0F,OAAO4C,SAASC,WA6BmB,iBACjCpF,IAAAC,cAAA,UAAQiF,QAzBd,WAEyB,kBAApBP,GACCC,EAAmB,iBACnBrG,SAASC,eAAe,gBAAgBC,MAAMwG,QAAU,OACxD1G,SAASC,eAAe,SAASC,MAAMwG,QAAU,OACjDF,aAAaM,QAAQ,kBAAmB,YAGxCT,EAAmB,iBACnBrG,SAASC,eAAe,gBAAgBC,MAAMwG,QAAU,QACxD1G,SAASC,eAAe,SAASC,MAAMwG,QAAU,OACjDF,aAAaM,QAAQ,kBAAmB,cAaL,KAAGV,EAAgB,MAIxD3E,IAAAC,cAAA,OAAK/B,GAAK,QACR8B,IAAAC,cAACC,EAAI,CAACrD,OAAUA,OCtFXyI,IAASC,WAAWhH,SAASC,eAAe,SACpDgH,OACDxF,IAAAC,cAACyE,EAAG","file":"static/js/main.cf0dd097.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\n\r\nconst Stopwatch = ( {toggle, score, problems, setProblems, data, setData} ) => {\r\n\r\n    // max score - game ends once this score is reached\r\n    const maxScore = 40\r\n    const maxTime = 120\r\n\r\n    const [time, setTime] = useState(toggle % 2 === 0 ? maxTime : 0)\r\n    const text = toggle % 2 === 0 ? \"Race Timer: \" : \"Countdown Timer: \"\r\n    let startTime = useRef(new Date())\r\n    \r\n    let problemTracker = useRef([score, new Date()]) // checks how much time is spent on the nth problem \r\n\r\n    // returns difference in time, including milliseconds \r\n    const timeDif = (time1, time2) => {\r\n        return ((time1.getTime() - time2.getTime())/1000).toFixed(2)\r\n    }\r\n\r\n    // updates time every second; otherwise centers score & increases font size\r\n    const updateTime = (elapsed) => {\r\n\r\n        if(toggle % 2 === 1){\r\n\r\n            if(elapsed / 1000 <= maxTime){\r\n\r\n                setTime(maxTime - elapsed / 1000)\r\n\r\n            } else {\r\n                document.getElementById('game').style.visibility = 'hidden'\r\n                document.getElementById('score').style.textAlign = 'center'\r\n                document.getElementById('score').style.fontSize = '30px'\r\n\r\n                console.log(\"first digit \" + problems.map(problem => problem.problem.split(/[\\s=]+/)[0]))\r\n                console.log(\"second digit \" + problems.map(problem => problem.problem.split(/[\\s=]+/)[2]))\r\n                console.log(\"operator \" + problems.map(problem => problem.problem.split(/[\\s=]+/)[1]))\r\n                console.log(\"answer \" + problems.map(problem => problem.problem.split(/[\\s=]+/)[3]))\r\n                console.log(\"time \" + problems.map(problem => problem.time))\r\n            }\r\n\r\n        } else {\r\n\r\n            if(score < maxScore){\r\n                setTime(elapsed / 1000)\r\n    \r\n            } else {\r\n                document.getElementById('game').style.visibility = 'hidden'\r\n                document.getElementById('timer').style.textAlign = \"center\"\r\n                document.getElementById('timer').style.fontSize = \"30px\"\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // returns which interval a certain time difference falls in\r\n    const getRange = (k) => {\r\n        const badTime = 3.5 \r\n        // const midTime = 2.5 // unnecessary variable\r\n        const goodTime = 1.5\r\n\r\n        // 0 = good, 1 = mid, 2 = bad\r\n        if(k < goodTime){\r\n            return 0\r\n        }else if (k < badTime){\r\n            return 1\r\n        }else{\r\n            return 2\r\n        }\r\n\r\n    }\r\n\r\n    const problemTime = () => {\r\n\r\n        if (score !== problemTracker.current[0]){\r\n            const t = timeDif(new Date(), problemTracker.current[1])\r\n            problemTracker.current = [score, new Date()]\r\n\r\n            const colors = ['green', 'grey', 'red']\r\n            document.getElementById(score - 1).style.color = colors[getRange(t)]\r\n            document.getElementById(score - 1).style.opacity = 0.5\r\n\r\n            const lastProblem = problems.pop()\r\n            lastProblem['time'] = t\r\n            setProblems(problems.concat(lastProblem))\r\n            updateData(lastProblem)\r\n            console.log(lastProblem)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    const updateData = (problem) => {\r\n        setData(data.concat([{x: problem.id + 1, time: problem.time}]))\r\n    }\r\n\r\n    useEffect( () => {\r\n\r\n        const timer = setInterval(() => {\r\n\r\n            let elapsed = Date.parse(new Date()) - Date.parse(startTime.current)\r\n            updateTime(elapsed)\r\n            problemTime() // consider extracting this as well for use in countdown gamemode\r\n\r\n        }, 100)\r\n\r\n        return () => clearInterval(timer)\r\n        \r\n    }, [score, toggle])\r\n\r\n\r\n    return (\r\n        <p id = \"timer\"> {text} {time} </p>\r\n    )\r\n\r\n}\r\n\r\nexport default Stopwatch","import { ScatterChart, Scatter, Label, XAxis, YAxis } from 'recharts'\r\nimport React, { useState } from 'react'\r\nimport Stopwatch from './Stopwatch'\r\n\r\nfunction Game ( {toggle} ) {\r\n\r\n    // keeps track of score\r\n    const [score, setScore] = useState(0)\r\n\r\n    // stores past problems\r\n    const [problems, setProblems] = useState([])\r\n\r\n    // stores problem data (problem number & problem time) to be graphed\r\n    const [data, setData] = useState([{x: 0, time: 0}])\r\n\r\n    // bound of answers will be between lower & 2 * upper, kinda\r\n    const lower = 10\r\n    const upper = 100\r\n    const operator = ['+','-','x','/']\r\n\r\n    // input box value - refreshes to '' upon correct answer\r\n    const [value, setValue] = useState('')\r\n\r\n    // question numbers & operator; first two indices = integers, third = operator\r\n    const [question, setQuestion] = useState([0, 0, 0]) //add, minus, mult, div = 0, 1, 2, 3\r\n\r\n\r\n    function toProblem(i) {\r\n\r\n        if (i === 1){\r\n            const temp = [question[0] + question[1], question[0] - question[1], question[0] * question[1], question[0]/question[1]][question[2]]\r\n\r\n            return question[0] + \" \" + operator[question[2]] + \" \" + question[1] + \" = \" + temp\r\n        }\r\n\r\n        return question[0] + \" \" + operator[question[2]] + \" \" + question[1]\r\n    }\r\n\r\n\r\n    // user input -> checks if int, then checks if answer is right\r\n    function handleValueChange(event) {\r\n        const input = event.target.value\r\n\r\n        if(!isNaN(input)){\r\n            setValue(input)\r\n            checkAnswer(parseInt(input, 10))\r\n        } else if (input === ''){\r\n            setValue(input)\r\n        }\r\n\r\n    }\r\n\r\n    // if user input is correct, calls getRandomQuestion\r\n    function checkAnswer(input){\r\n\r\n        const correctAdd = (question[2] === 0 && input === question[0] + question[1])\r\n        const correctMinus = (question[2] === 1 && input === question[0] - question[1])\r\n        const correctMult = (question[2] === 2 && input === question[0] * question[1])\r\n        const correctDiv = (question[2] === 3 && input === question[0] / question[1])\r\n\r\n        if(correctAdd || correctMinus || correctMult || correctDiv){\r\n\r\n            const problem = {\r\n                problem: toProblem(1),\r\n                time: 0,\r\n                id: problems.length,           \r\n            }\r\n\r\n            setProblems(problems.concat(problem))\r\n            // console.log(problems)\r\n\r\n            \r\n            getRandomQuestion()\r\n            setValue('')\r\n            setScore(score + 1)\r\n        }\r\n\r\n    }\r\n\r\n    function getRandomAdd() {\r\n        const rand1 = Math.floor(Math.random() * (upper - lower)) + lower\r\n        const rand2 = Math.floor(Math.random() * (upper - lower)) + lower\r\n\r\n        console.log('random add')\r\n        console.log(rand1, rand2)\r\n        setQuestion([rand1, rand2, 0])\r\n    }\r\n\r\n    // remove chance of getting same number 2ce by altering bounds\r\n    function getRandomMinus() {\r\n        const rand1 = Math.floor(Math.random() * (2 * upper - lower)) + lower\r\n        const rand2 = Math.floor(Math.random() * (2 * upper - lower)) + lower\r\n\r\n        console.log('random minus')\r\n        // console.log(rand1, rand2)\r\n        setQuestion([Math.max(rand1, rand2), Math.min(rand1, rand2), 1])\r\n    }\r\n\r\n    function getRandomMult() {\r\n        const rand1 = Math.ceil(Math.random() * (Math.sqrt(2 * upper))) + 1 \r\n        const rand2 = Math.ceil(Math.random() * Math.sqrt(2 * upper)) + 1\r\n        console.log('random mult')\r\n\r\n        setQuestion([rand1, rand2, 2])\r\n    }\r\n\r\n\r\n    function getRandomDiv() {\r\n        const rand1 = Math.ceil(Math.random() * Math.sqrt(2 * upper)) + 1\r\n        const rand2 = Math.ceil(Math.random() * Math.sqrt(2 * upper)) + 1\r\n        const val1 = rand1 * rand2\r\n        console.log('random div')\r\n\r\n        setQuestion([val1, rand2, 3])\r\n\r\n    }\r\n\r\n\r\n    function getRandomQuestion(){\r\n        const questionType = [getRandomAdd, getRandomAdd, getRandomMinus, getRandomMinus, getRandomMult, getRandomDiv] \r\n        const pickType = Math.floor(Math.random() * (questionType.length))\r\n    \r\n        questionType[pickType]()\r\n    }\r\n\r\n    window.addEventListener('load', function() {\r\n        getRandomQuestion()\r\n    })\r\n\r\n    return (\r\n        <div>\r\n\r\n            <p id = \"score\"> Score: {score}</p>\r\n            <Stopwatch toggle = {toggle} score = {score} problems = {problems} setProblems = {setProblems} data = {data} setData = {setData}/>\r\n\r\n            <div id = 'game'>\r\n                {question[0]} {operator[question[2]]} {question[1]} = <input value = {value} onChange = {handleValueChange}/>\r\n            </div>\r\n\r\n            <dl id = 'problem-list'>\r\n                {problems.map(problem =>\r\n                    <li key = {problem.id} id = {problem.id}>\r\n                        {problem.problem} {problem.time}\r\n                    </li>\r\n                ).reverse()}\r\n            </dl>\r\n\r\n\r\n            <div id = \"graph\">\r\n\r\n                <ScatterChart width={600} height={400} margin = {{ top: 5, right: 10, left: 50, bottom: 20 }}>\r\n\r\n                    <XAxis type=\"number\" dataKey=\"x\">\r\n                    <Label value = \"Problems\" position = \"bottom\"/>\r\n                    </XAxis>\r\n\r\n                    <YAxis type=\"number\" dataKey=\"time\">\r\n                    <Label value = \"Time\" position = \"insideRight\" angle = {-90} offset = {50} />\r\n                    </YAxis>\r\n\r\n                    <Scatter data = {data} fill=\"black\" lineJointType='monotoneX' line/>\r\n\r\n                </ScatterChart>\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Game;","import React, { useState } from 'react'\nimport Game from './Game'\n\nfunction App() {\n\n  // toggle visibility of problems; by default is not visible\n  const [displayProblems, setDisplayProblems] = useState('Show Problems')\n\n  // keeps track of game mode; by default is set to countdown mode\n  const [toggle, setToggle] = useState(0)\n\n\n  const checkToggle = () => {\n\n    if('toggle' in localStorage) {\n      setToggle(parseInt(localStorage.getItem('toggle')) + 1)\n    }\n\n  }\n\n  const checkProblems = () => {\n\n    if('displayProblems' in localStorage) {\n\n      const d = localStorage.getItem('displayProblems')\n      \n      if(d === 'hidden'){\n        document.getElementById('problem-list').style.display = 'none'\n        document.getElementById('graph').style.display = 'none'\n        setDisplayProblems('Show Problems')\n      } else {\n        document.getElementById('problem-list').style.display = 'block'\n        document.getElementById('graph').style.display = 'flex'\n        setDisplayProblems('Hide Problems')\n      }\n\n    } else {\n      document.getElementById('problem-list').style.display = 'none'\n      document.getElementById('graph').style.display = 'none'\n\n    }\n\n  }\n\n  // checks if stored mode exists\n  window.onload = () => {\n\n    checkToggle()\n    checkProblems()\n\n  }\n\n  // change state of toggle buton\n  function changeToggle() {\n      localStorage.setItem('toggle', toggle)\n      window.location.reload()\n  }\n            \n\n  // function to change visibility of past problems - stores past visibility state\n  function toggleProblems () {\n\n    if(displayProblems === 'Hide Problems'){\n        setDisplayProblems('Show Problems')\n        document.getElementById('problem-list').style.display = 'none'\n        document.getElementById('graph').style.display = 'none' //changes visibility of graph as well\n        localStorage.setItem('displayProblems', 'hidden')\n\n    }else{\n        setDisplayProblems('Hide Problems')\n        document.getElementById('problem-list').style.display = 'block'\n        document.getElementById('graph').style.display = 'flex' //changes visibility of graph as well\n        localStorage.setItem('displayProblems', 'visible')\n\n    }\n\n  } \n\n  return (\n    <div>\n\n      <div id = \"buttons\">\n\n        <button onClick = {() => window.location.reload()}> Restart </button>\n        <button onClick = {changeToggle}> Toggle Mode </button>\n        <button onClick = {toggleProblems}>  {displayProblems} </button>\n\n      </div>      \n\n      <div id = \"main\">\n        <Game toggle = {toggle}/>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <App />\n);\n\n\n"],"sourceRoot":""}