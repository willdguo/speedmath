{"version":3,"sources":["Stopwatch.js","Game.js","App.js","index.js"],"names":["Stopwatch","_ref","toggle","score","problems","setProblems","data","setData","_useState","useState","_useState2","_slicedToArray","time","setTime","text","startTime","useRef","Date","problemTracker","updateData","problem","concat","x","id","useEffect","timer","setInterval","elapsed","document","getElementById","style","visibility","textAlign","fontSize","console","log","map","split","updateTime","parse","current","t","time1","time2","getTime","toFixed","currentBg","background","color","k","opacity","lastProblem","pop","problemTime","clearInterval","React","createElement","Game","theme","setScore","_useState3","_useState4","_useState5","_useState6","lower","upper","operator","_useState7","_useState8","value","setValue","_useState9","_useState10","question","setQuestion","toProblem","i","temp","getRandomAdd","rand1","Math","floor","random","rand2","getRandomMinus","max","min","getRandomMult","ceil","getRandomDiv","val1","getRandomQuestion","questionType","length","window","addEventListener","onChange","event","input","target","isNaN","correctAdd","correctMinus","correctMult","correctDiv","checkAnswer","parseInt","key","reverse","ScatterChart","width","height","margin","top","right","left","bottom","XAxis","type","dataKey","stroke","Label","position","YAxis","angle","offset","Scatter","fill","lineJointType","line","App","displayProblems","setDisplayProblems","setToggle","setTheme","onload","localStorage","getItem","display","onClick","location","reload","setItem","tc","all","getElementsByTagName","element","problemColors","indexOf","ReactDOM","createRoot","render"],"mappings":"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","file":"static/js/main.cba1ff4c.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\n\r\nconst Stopwatch = ( {toggle, score, problems, setProblems, data, setData} ) => {\r\n\r\n    // max score - game ends once this score is reached\r\n    const maxScore = 40\r\n    const maxTime = 120\r\n\r\n    const [time, setTime] = useState(toggle % 2 === 0 ? maxTime : 0)\r\n    const text = toggle % 2 === 0 ? \"Race Timer: \" : \"Countdown Timer: \"\r\n    let startTime = useRef(new Date())\r\n    \r\n    let problemTracker = useRef([score, new Date()]) // checks how much time is spent on the nth problem \r\n\r\n    // returns difference in time, including milliseconds \r\n    const timeDif = (time1, time2) => {\r\n        return ((time1.getTime() - time2.getTime())/1000).toFixed(2)\r\n    }\r\n\r\n    // updates time every second; otherwise centers score & increases font size\r\n    const updateTime = (elapsed) => {\r\n\r\n        if(toggle % 2 === 1){\r\n\r\n            if(elapsed / 1000 <= maxTime){\r\n\r\n                setTime(maxTime - elapsed / 1000)\r\n\r\n            } else {\r\n                document.getElementById('game').style.visibility = 'hidden'\r\n                document.getElementById('score').style.textAlign = 'center'\r\n                document.getElementById('score').style.fontSize = '30px'\r\n\r\n                \r\n                console.log(\"first digit \" + problems.map(problem => problem.problem.split(/[\\s=]+/)[0]))\r\n                console.log(\"second digit \" + problems.map(problem => problem.problem.split(/[\\s=]+/)[2]))\r\n                console.log(\"operator \" + problems.map(problem => problem.problem.split(/[\\s=]+/)[1]))\r\n                console.log(\"answer \" + problems.map(problem => problem.problem.split(/[\\s=]+/)[3]))\r\n                console.log(\"time \" + problems.map(problem => problem.time))\r\n                \r\n            }\r\n\r\n        } else {\r\n\r\n            if(score < maxScore){\r\n                setTime(elapsed / 1000)\r\n    \r\n            } else {\r\n                document.getElementById('game').style.visibility = 'hidden'\r\n                document.getElementById('timer').style.textAlign = \"center\"\r\n                document.getElementById('timer').style.fontSize = \"30px\"\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // returns which interval a certain time difference falls in\r\n    const getRange = (k) => {\r\n        const badTime = 3.5 \r\n        // const midTime = 2.5 // unnecessary variable\r\n        const goodTime = 1.5\r\n\r\n        // 0 = good, 1 = mid, 2 = bad\r\n        if(k < goodTime){\r\n            return 0\r\n        }else if (k < badTime){\r\n            return 1\r\n        }else{\r\n            return 2\r\n        }\r\n\r\n    }\r\n\r\n    const problemTime = () => {\r\n\r\n        if (score !== problemTracker.current[0]){\r\n            const t = timeDif(new Date(), problemTracker.current[1])\r\n            problemTracker.current = [score, new Date()]\r\n\r\n            const colors = ['green', 'lightgreen', 'grey', 'white', 'red', 'lightcoral']\r\n            const currentBg = document.getElementById('buttons').style.background === 'black'\r\n\r\n            //console.log(currentBg)\r\n\r\n            document.getElementById(score - 1).style.color = colors[getRange(t) * 2 + currentBg]\r\n            document.getElementById(score - 1).style.opacity = 0.5 + 0.25 * currentBg\r\n            document.getElementById(score - 1).style.background = currentBg ? 'black' : 'white'\r\n\r\n            const lastProblem = problems.pop()\r\n            lastProblem['time'] = t\r\n            setProblems(problems.concat(lastProblem))\r\n            updateData(lastProblem)\r\n            console.log(lastProblem)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    const updateData = (problem) => {\r\n        setData(data.concat([{x: problem.id + 1, time: problem.time}]))\r\n    }\r\n\r\n    useEffect( () => {\r\n\r\n        const timer = setInterval(() => {\r\n\r\n            let elapsed = Date.parse(new Date()) - Date.parse(startTime.current)\r\n            updateTime(elapsed)\r\n            problemTime() // consider extracting this as well for use in countdown gamemode\r\n\r\n        }, 100)\r\n\r\n        return () => clearInterval(timer)\r\n        \r\n    }, [score, toggle])\r\n\r\n\r\n    return (\r\n        <p id = \"timer\"> {text} {time} </p>\r\n    )\r\n\r\n}\r\n\r\nexport default Stopwatch","import { ScatterChart, Scatter, Label, XAxis, YAxis } from 'recharts'\r\nimport React, { useState } from 'react'\r\nimport Stopwatch from './Stopwatch'\r\n\r\nfunction Game ( {toggle, theme} ) {\r\n\r\n    // keeps track of score\r\n    const [score, setScore] = useState(0)\r\n\r\n    // stores past problems\r\n    const [problems, setProblems] = useState([])\r\n\r\n    // stores problem data (problem number & problem time) to be graphed\r\n    const [data, setData] = useState([{x: 0, time: 0}])\r\n\r\n    // bound of answers will be between lower & 2 * upper, kinda\r\n    const lower = 10\r\n    const upper = 100\r\n    const operator = ['+','-','x','/']\r\n\r\n    // input box value - refreshes to '' upon correct answer\r\n    const [value, setValue] = useState('')\r\n\r\n    // question numbers & operator; first two indices = integers, third = operator\r\n    const [question, setQuestion] = useState([0, 0, 0]) //add, minus, mult, div = 0, 1, 2, 3\r\n\r\n\r\n    function toProblem(i) {\r\n\r\n        if (i === 1){\r\n            const temp = [question[0] + question[1], question[0] - question[1], question[0] * question[1], question[0]/question[1]][question[2]]\r\n\r\n            return question[0] + \" \" + operator[question[2]] + \" \" + question[1] + \" = \" + temp\r\n        }\r\n\r\n        return question[0] + \" \" + operator[question[2]] + \" \" + question[1]\r\n    }\r\n\r\n\r\n    // user input -> checks if int, then checks if answer is right\r\n    function handleValueChange(event) {\r\n        const input = event.target.value\r\n\r\n        if(!isNaN(input)){\r\n            setValue(input)\r\n            checkAnswer(parseInt(input, 10))\r\n        } else if (input === ''){\r\n            setValue(input)\r\n        }\r\n\r\n    }\r\n\r\n    // if user input is correct, calls getRandomQuestion\r\n    function checkAnswer(input){\r\n\r\n        const correctAdd = (question[2] === 0 && input === question[0] + question[1])\r\n        const correctMinus = (question[2] === 1 && input === question[0] - question[1])\r\n        const correctMult = (question[2] === 2 && input === question[0] * question[1])\r\n        const correctDiv = (question[2] === 3 && input === question[0] / question[1])\r\n\r\n        if(correctAdd || correctMinus || correctMult || correctDiv){\r\n\r\n            const problem = {\r\n                problem: toProblem(1),\r\n                time: 0,\r\n                id: problems.length,           \r\n            }\r\n\r\n            setProblems(problems.concat(problem))\r\n            // console.log(problems)\r\n\r\n            \r\n            getRandomQuestion()\r\n            setValue('')\r\n            setScore(score + 1)\r\n        }\r\n\r\n    }\r\n\r\n    function getRandomAdd() {\r\n        const rand1 = Math.floor(Math.random() * (upper - lower)) + lower\r\n        const rand2 = Math.floor(Math.random() * (upper - lower)) + lower\r\n\r\n        console.log('random add')\r\n        console.log(rand1, rand2)\r\n        setQuestion([rand1, rand2, 0])\r\n    }\r\n\r\n    // remove chance of getting same number 2ce by altering bounds\r\n    function getRandomMinus() {\r\n        const rand1 = Math.floor(Math.random() * (2 * upper - lower)) + lower\r\n        const rand2 = Math.floor(Math.random() * (2 * upper - lower)) + lower\r\n\r\n        console.log('random minus')\r\n        // console.log(rand1, rand2)\r\n        setQuestion([Math.max(rand1, rand2), Math.min(rand1, rand2), 1])\r\n    }\r\n\r\n    function getRandomMult() {\r\n        const rand1 = Math.ceil(Math.random() * (2 * lower - 1)) + 1 \r\n        const rand2 = Math.ceil(Math.random() * (2 * lower - 1)) + 1\r\n        console.log('random mult')\r\n\r\n        setQuestion([rand1, rand2, 2])\r\n    }\r\n\r\n\r\n    function getRandomDiv() {\r\n        const rand1 = Math.ceil(Math.random() * (2 * lower - 1)) + 1\r\n        const rand2 = Math.ceil(Math.random() * (2 * lower - 1)) + 1\r\n        const val1 = rand1 * rand2\r\n        console.log('random div')\r\n\r\n        setQuestion([val1, rand2, 3])\r\n\r\n    }\r\n\r\n\r\n    function getRandomQuestion(){\r\n        const questionType = [getRandomAdd, getRandomAdd, getRandomMinus, getRandomMinus, getRandomMult, getRandomDiv] \r\n        const pickType = Math.floor(Math.random() * (questionType.length))\r\n    \r\n        questionType[pickType]()\r\n    }\r\n\r\n    window.addEventListener('load', function() {\r\n        getRandomQuestion()\r\n    })\r\n\r\n    return (\r\n        <div>\r\n\r\n            <p id = \"score\"> Score: {score}</p>\r\n            <Stopwatch toggle = {toggle} score = {score} problems = {problems} setProblems = {setProblems} data = {data} setData = {setData}/>\r\n\r\n            <div id = 'game'>\r\n                {question[0]} {operator[question[2]]} {question[1]} = <input value = {value} onChange = {handleValueChange}/>\r\n            </div>\r\n\r\n            <dl id = 'problem-list' color = {['black', 'white'][theme % 2]}>\r\n                {problems.map(problem =>\r\n                    <li key = {problem.id} id = {problem.id}>\r\n                        {problem.problem} {problem.time}\r\n                    </li>\r\n                ).reverse()}\r\n            </dl>\r\n\r\n\r\n            <div id = \"graph\">\r\n\r\n                <ScatterChart width={600} height={400} margin = {{ top: 5, right: 10, left: 50, bottom: 20 }}>\r\n\r\n                    <XAxis type=\"number\" dataKey=\"x\" stroke = {['black', 'white'][(theme + 1) % 2]}>\r\n                    <Label value = \"Problems\" position = \"bottom\"/>\r\n                    </XAxis>\r\n\r\n                    <YAxis type=\"number\" dataKey=\"time\" stroke = {['black', 'white'][(theme + 1) % 2]}>\r\n                    <Label value = \"Time\" position = \"insideRight\" angle = {-90} offset = {50} />\r\n                    </YAxis>\r\n\r\n                    <Scatter id = \"scatter\" data = {data} fill=\"black\" lineJointType='monotoneX' line/>\r\n\r\n                </ScatterChart>\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Game;","import React, { useState } from 'react'\nimport Game from './Game'\n\nfunction App() {\n\n  // toggle visibility of problems; by default is not visible\n  const [displayProblems, setDisplayProblems] = useState('Show Problems')\n\n  // keeps track of game mode; by default is set to countdown mode\n  const [toggle, setToggle] = useState(0)\n\n  // color mode (1 light, 0 dark)\n  const [theme, setTheme] = useState(1)\n\n\n  const checkToggle = () => {\n\n    if('toggle' in localStorage) {\n      setToggle(parseInt(localStorage.getItem('toggle')) + 1)\n    }\n\n  }\n\n  const checkProblems = () => {\n\n    if('displayProblems' in localStorage) {\n\n      const d = localStorage.getItem('displayProblems')\n      \n      if(d === 'hidden'){\n        document.getElementById('problem-list').style.display = 'none'\n        document.getElementById('graph').style.display = 'none'\n        setDisplayProblems('Show Problems')\n      } else {\n        document.getElementById('problem-list').style.display = 'block'\n        document.getElementById('graph').style.display = 'flex'\n        setDisplayProblems('Hide Problems')\n      }\n\n    } else {\n      document.getElementById('problem-list').style.display = 'none'\n      document.getElementById('graph').style.display = 'none'\n\n    }\n\n  }\n\n  // checks if stored mode exists\n  window.onload = () => {\n\n    checkToggle()\n    checkProblems()\n\n  }\n\n  // change state of toggle buton\n  function changeToggle() {\n      localStorage.setItem('toggle', toggle)\n      window.location.reload()\n  }\n            \n\n  // function to change visibility of past problems - stores past visibility state\n  function toggleProblems () {\n\n    if(displayProblems === 'Hide Problems'){\n\n        setDisplayProblems('Show Problems')\n        document.getElementById('problem-list').style.display = 'none'\n        document.getElementById('graph').style.display = 'none' //changes visibility of graph as well\n        localStorage.setItem('displayProblems', 'hidden')\n\n    }else{\n\n        setDisplayProblems('Hide Problems')\n        document.getElementById('problem-list').style.display = 'block'\n        document.getElementById('graph').style.display = 'flex' //changes visibility of graph as well\n        localStorage.setItem('displayProblems', 'visible')\n\n    }\n\n  } \n\n\n  function toggleColors () {\n\n    const tc = ['white', 'black']\n    const gc = ['light', 'dark']\n\n    setTheme(theme + 1)\n    localStorage.setItem('theme', theme)\n    // document.body.style.background = tc[theme % 2]\n\n    var all = document.getElementsByTagName('*')\n\n    for(var i = 0; i < all.length; i++){\n\n      let element = all[i]\n\n      element.style.background = tc[theme % 2]\n      //console.log(element.id + \" \" + typeof(element.id))\n\n      if(isNaN(parseInt(element.id))){\n\n        //console.log(element.id)\n\n        element.style.color = tc[(theme + 1) % 2]\n\n      } else {\n\n        const problemColors = ['green', 'lightgreen', 'grey', 'white', 'red', 'lightcoral']\n        \n        if(theme % 2 === 0){\n          element.style.opacity = 0.5\n          const current = problemColors.indexOf(element.style.color)\n          element.style.color = problemColors[current - 1]\n          \n        } else {\n          element.style.opacity = 0.75\n          const current = problemColors.indexOf(element.style.color)\n          element.style.color = problemColors[current + 1]\n        }\n\n      }\n\n    }\n\n    document.getElementById('game').style.background = gc[theme % 2] + \"grey\"\n    //document.getElementById('scatter').style.color = tc[(theme + 1) % 2] - MAKE SCATTER PLOT CHANGE COLOR MODE TOO\n\n  }\n\n  const themeColors = ['light', 'dark']\n\n  // consider filling buttons w/ icons - a) takes up less space, b) more aesthetic\n  \n  return (\n\n    <div>\n\n      <div id = \"buttons\">\n\n        <button onClick = {() => window.location.reload()}> Restart </button>\n        <button onClick = {changeToggle}> Toggle Gamemode </button>\n        <button onClick = {toggleProblems}>  {displayProblems} </button>\n        <button onClick = {toggleColors}> {themeColors[theme % 2]} </button>\n\n      </div>      \n\n      <div id = \"main\">\n        <Game toggle = {toggle} theme = {theme}/>\n      </div>\n\n    </div>\n    \n  );\n\n}\n\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <App />\n);\n\n\n"],"sourceRoot":""}