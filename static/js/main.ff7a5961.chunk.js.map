{"version":3,"sources":["Game.js","Timer.js","App.js","index.js"],"names":["Game","_ref","score","setScore","lower","upper","_useState","useState","_useState2","_slicedToArray","value","setValue","_useState3","_useState4","question","setQuestion","getRandomAdd","rand1","Math","floor","random","rand2","console","log","getRandomMinus","max","min","getRandomMult","ceil","sqrt","getRandomDiv","val1","getRandomQuestion","questionType","length","window","addEventListener","React","createElement","id","onChange","event","input","target","parseInt","correctAdd","correctMinus","correctMult","correctDiv","checkAnswer","Timer","time","setTime","startTime","Date","setSeconds","getSeconds","useEffect","setInterval","total","document","getElementById","style","visibility","updateTime","parse","App","onClick","location","reload","ReactDOM","createRoot","render"],"mappings":"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","file":"static/js/main.ff7a5961.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nfunction Game ( {score, setScore} ) {\r\n\r\n    const lower = 10\r\n    const upper = 100\r\n\r\n    // input box value - refreshes to '' upon correct answer\r\n    const [value, setValue] = useState('')\r\n\r\n    // question numbers & operator; first two indices = integers, third = operator\r\n    const [question, setQuestion] = useState([0, 0, 0]) //add, minus, mult, div = 0, 1, 2, 3\r\n\r\n    // user input -> checks if int, then checks if answer is right\r\n    function handleValueChange(event) {\r\n        const input = event.target.value\r\n\r\n        if(input == parseInt(input, 10)){\r\n            setValue(input)\r\n            checkAnswer(parseInt(input, 10))\r\n        } else if (input == ''){\r\n            setValue(input)\r\n        }\r\n\r\n    }\r\n\r\n    // if user input is correct, calls getRandomQuestion\r\n    function checkAnswer(input){\r\n\r\n        console.log(input, question[2])\r\n\r\n        const correctAdd = (question[2] == 0 && input == question[0] + question[1])\r\n        const correctMinus = (question[2] == 1 && input == question[0] - question[1])\r\n        const correctMult = (question[2] == 2 && input == question[0] * question[1])\r\n        const correctDiv = (question[2] == 3 && input == question[0] / question[1])\r\n\r\n        if(correctAdd || correctMinus || correctMult || correctDiv){\r\n            getRandomQuestion()\r\n            setValue('')\r\n            setScore(score + 1)\r\n        }\r\n\r\n    }\r\n\r\n    function getRandomAdd() {\r\n        const rand1 = Math.floor(Math.random() * (upper - lower)) + lower\r\n        const rand2 = Math.floor(Math.random() * (upper - lower)) + lower\r\n\r\n        console.log('random add')\r\n        console.log(rand1, rand2)\r\n        setQuestion([rand1, rand2, 0])\r\n    }\r\n\r\n    function getRandomMinus() {\r\n        const rand1 = Math.floor(Math.random() * (2 * upper - lower)) + lower\r\n        const rand2 = Math.floor(Math.random() * (2 * upper - lower)) + lower\r\n\r\n        console.log('random minus')\r\n        console.log(rand1, rand2)\r\n        setQuestion([Math.max(rand1, rand2), Math.min(rand1, rand2), 1])\r\n    }\r\n\r\n    function getRandomMult() {\r\n        const rand1 = Math.ceil(Math.random() * (Math.sqrt(2 * upper))) \r\n        const rand2 = Math.ceil(Math.random() * Math.sqrt(2 * upper))\r\n        console.log('random mult')\r\n\r\n        setQuestion([rand1, rand2, 2])\r\n    }\r\n\r\n\r\n    function getRandomDiv() {\r\n        const rand1 = Math.ceil(Math.random() * (Math.sqrt(2 * upper))) \r\n        const rand2 = Math.ceil(Math.random() * Math.sqrt(2 * upper)) + 1\r\n        const val1 = rand1 * rand2\r\n        console.log('random div')\r\n\r\n        setQuestion([val1, rand2, 3])\r\n\r\n    }\r\n\r\n\r\n    function getRandomQuestion(){\r\n        const questionType = [getRandomAdd, getRandomMinus,getRandomMult, getRandomDiv] \r\n        const pickType = Math.floor(Math.random() * (questionType.length))\r\n    \r\n        questionType[pickType]()\r\n    }\r\n\r\n    const operator = ['+','-','x','/']\r\n\r\n    window.addEventListener('load', function() {\r\n        getRandomQuestion()\r\n    })\r\n\r\n    return (\r\n        <div id = 'game'>\r\n            {question[0]} {operator[question[2]]} {question[1]} = <input value = {value} onChange = {handleValueChange}/>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Game;","import React, { useState } from 'react'\r\nimport { useEffect } from 'react'\r\n\r\n\r\nconst Timer = () => {\r\n\r\n\r\n    const [time, setTime] = useState(120)\r\n    let startTime = new Date()\r\n    startTime.setSeconds(startTime.getSeconds() + 120)\r\n\r\n\r\n    const updateTime = (total) => {\r\n\r\n        if (total >= 0){\r\n        setTime(total / 1000)\r\n        console.log(total)\r\n        } else {\r\n        document.getElementById('game').style.visibility = 'hidden'\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        const timer = setInterval(() => {\r\n            let total = Date.parse(startTime) - Date.parse(new Date())\r\n            updateTime(total)\r\n        }, 1000)\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <p> Time: {time} </p>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Timer\r\n","import React, { useState } from 'react'\nimport Game from './Game'\nimport Timer from './Timer'\n\nfunction App() {\n\n  // keeps track of score\n  const [score, setScore] = useState(0)\n\n  \n  return (\n    <div>\n\n      <p> Score: {score}</p>\n      <Timer />\n\n      { /* <button onClick = {() => console.log(time)}> click me </button> */ }\n\n      <div id = \"main\">\n\n        <Game score = {score} setScore = {setScore}/>\n\n      </div>\n\n      <button onClick = {() => window.location.reload()}> Restart </button>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <App />\n);\n\n\n"],"sourceRoot":""}